{"ast":null,"code":"import { DecodeStream } from './DecodeStream.js';\nconst textEncoder = new TextEncoder();\nconst isBigEndian = new Uint8Array(new Uint16Array([0x1234]).buffer)[0] == 0x12;\nexport class EncodeStream {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.view = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);\n    this.pos = 0;\n  }\n\n  writeBuffer(buffer) {\n    this.buffer.set(buffer, this.pos);\n    this.pos += buffer.length;\n  }\n\n  writeString(string) {\n    let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ascii';\n    let buf;\n\n    switch (encoding) {\n      case 'utf16le':\n      case 'utf16-le':\n      case 'ucs2':\n        // node treats this the same as utf16.\n        buf = stringToUtf16(string, isBigEndian);\n        break;\n\n      case 'utf16be':\n      case 'utf16-be':\n        buf = stringToUtf16(string, !isBigEndian);\n        break;\n\n      case 'utf8':\n        buf = textEncoder.encode(string);\n        break;\n\n      case 'ascii':\n        buf = stringToAscii(string);\n        break;\n\n      default:\n        throw new Error(`Unsupported encoding: ${encoding}`);\n    }\n\n    this.writeBuffer(buf);\n  }\n\n  writeUInt24BE(val) {\n    this.buffer[this.pos++] = val >>> 16 & 0xff;\n    this.buffer[this.pos++] = val >>> 8 & 0xff;\n    this.buffer[this.pos++] = val & 0xff;\n  }\n\n  writeUInt24LE(val) {\n    this.buffer[this.pos++] = val & 0xff;\n    this.buffer[this.pos++] = val >>> 8 & 0xff;\n    this.buffer[this.pos++] = val >>> 16 & 0xff;\n  }\n\n  writeInt24BE(val) {\n    if (val >= 0) {\n      this.writeUInt24BE(val);\n    } else {\n      this.writeUInt24BE(val + 0xffffff + 1);\n    }\n  }\n\n  writeInt24LE(val) {\n    if (val >= 0) {\n      this.writeUInt24LE(val);\n    } else {\n      this.writeUInt24LE(val + 0xffffff + 1);\n    }\n  }\n\n  fill(val, length) {\n    if (length < this.buffer.length) {\n      this.buffer.fill(val, this.pos, this.pos + length);\n      this.pos += length;\n    } else {\n      const buf = new Uint8Array(length);\n      buf.fill(val);\n      this.writeBuffer(buf);\n    }\n  }\n\n}\n\nfunction stringToUtf16(string, swap) {\n  let buf = new Uint16Array(string.length);\n\n  for (let i = 0; i < string.length; i++) {\n    let code = string.charCodeAt(i);\n\n    if (swap) {\n      code = code >> 8 | (code & 0xff) << 8;\n    }\n\n    buf[i] = code;\n  }\n\n  return new Uint8Array(buf.buffer);\n}\n\nfunction stringToAscii(string) {\n  let buf = new Uint8Array(string.length);\n\n  for (let i = 0; i < string.length; i++) {\n    // Match node.js behavior - encoding allows 8-bit rather than 7-bit.\n    buf[i] = string.charCodeAt(i);\n  }\n\n  return buf;\n}\n\nfor (let key of Object.getOwnPropertyNames(DataView.prototype)) {\n  if (key.slice(0, 3) === 'set') {\n    let type = key.slice(3).replace('Ui', 'UI');\n\n    if (type === 'Float32') {\n      type = 'Float';\n    } else if (type === 'Float64') {\n      type = 'Double';\n    }\n\n    let bytes = DecodeStream.TYPES[type];\n\n    EncodeStream.prototype['write' + type + (bytes === 1 ? '' : 'BE')] = function (value) {\n      this.view[key](this.pos, value, false);\n      this.pos += bytes;\n    };\n\n    if (bytes !== 1) {\n      EncodeStream.prototype['write' + type + 'LE'] = function (value) {\n        this.view[key](this.pos, value, true);\n        this.pos += bytes;\n      };\n    }\n  }\n}","map":{"version":3,"names":["DecodeStream","textEncoder","TextEncoder","isBigEndian","Uint8Array","Uint16Array","buffer","EncodeStream","constructor","view","DataView","byteOffset","byteLength","pos","writeBuffer","set","length","writeString","string","encoding","buf","stringToUtf16","encode","stringToAscii","Error","writeUInt24BE","val","writeUInt24LE","writeInt24BE","writeInt24LE","fill","swap","i","code","charCodeAt","key","Object","getOwnPropertyNames","prototype","slice","type","replace","bytes","TYPES","value"],"sources":["E:/Mern login/client/node_modules/restructure/src/EncodeStream.js"],"sourcesContent":["import {DecodeStream} from './DecodeStream.js';\n\nconst textEncoder = new TextEncoder();\nconst isBigEndian = new Uint8Array(new Uint16Array([0x1234]).buffer)[0] == 0x12;\n\nexport class EncodeStream {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.view = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);\n    this.pos = 0;\n  }\n\n  writeBuffer(buffer) {\n    this.buffer.set(buffer, this.pos);\n    this.pos += buffer.length;\n  }\n\n  writeString(string, encoding = 'ascii') {\n    let buf;\n    switch (encoding) {\n      case 'utf16le':\n      case 'utf16-le':\n      case 'ucs2': // node treats this the same as utf16.\n        buf = stringToUtf16(string, isBigEndian);\n        break;\n\n      case 'utf16be':\n      case 'utf16-be':\n        buf = stringToUtf16(string, !isBigEndian);\n        break;\n\n      case 'utf8':\n        buf = textEncoder.encode(string);\n        break;\n\n      case 'ascii':\n        buf = stringToAscii(string);\n        break;\n\n      default:\n        throw new Error(`Unsupported encoding: ${encoding}`);\n    }\n\n    this.writeBuffer(buf);\n  }\n\n  writeUInt24BE(val) {\n    this.buffer[this.pos++] = (val >>> 16) & 0xff;\n    this.buffer[this.pos++] = (val >>> 8) & 0xff;\n    this.buffer[this.pos++] = val & 0xff;\n  }\n\n  writeUInt24LE(val) {\n    this.buffer[this.pos++] = val & 0xff;\n    this.buffer[this.pos++] = (val >>> 8) & 0xff;\n    this.buffer[this.pos++] = (val >>> 16) & 0xff;\n  }\n\n  writeInt24BE(val) {\n    if (val >= 0) {\n      this.writeUInt24BE(val);\n    } else {\n      this.writeUInt24BE(val + 0xffffff + 1);\n    }\n  }\n\n  writeInt24LE(val) {\n    if (val >= 0) {\n      this.writeUInt24LE(val);\n    } else {\n      this.writeUInt24LE(val + 0xffffff + 1);\n    }\n  }\n\n  fill(val, length) {\n    if (length < this.buffer.length) {\n      this.buffer.fill(val, this.pos, this.pos + length);\n      this.pos += length;\n    } else {\n      const buf = new Uint8Array(length);\n      buf.fill(val);\n      this.writeBuffer(buf);\n    }\n  }\n}\n\nfunction stringToUtf16(string, swap) {\n  let buf = new Uint16Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    let code = string.charCodeAt(i);\n    if (swap) {\n      code = (code >> 8) | ((code & 0xff) << 8);\n    }\n    buf[i] = code;\n  }\n  return new Uint8Array(buf.buffer);\n}\n\nfunction stringToAscii(string) {\n  let buf = new Uint8Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    // Match node.js behavior - encoding allows 8-bit rather than 7-bit.\n    buf[i] = string.charCodeAt(i);\n  }\n  return buf;\n}\n\nfor (let key of Object.getOwnPropertyNames(DataView.prototype)) {\n  if (key.slice(0, 3) === 'set') {\n    let type = key.slice(3).replace('Ui', 'UI');\n    if (type === 'Float32') {\n      type = 'Float';\n    } else if (type === 'Float64') {\n      type = 'Double';\n    }\n    let bytes = DecodeStream.TYPES[type];\n    EncodeStream.prototype['write' + type + (bytes === 1 ? '' : 'BE')] = function (value) {\n      this.view[key](this.pos, value, false);\n      this.pos += bytes;\n    };\n\n    if (bytes !== 1) {\n      EncodeStream.prototype['write' + type + 'LE'] = function (value) {\n        this.view[key](this.pos, value, true);\n        this.pos += bytes;\n      };\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}