{"ast":null,"code":"import { Base } from './Base.js';\nexport class Optional extends Base {\n  constructor(type) {\n    let condition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    super();\n    this.type = type;\n    this.condition = condition;\n  }\n\n  decode(stream, parent) {\n    let {\n      condition\n    } = this;\n\n    if (typeof condition === 'function') {\n      condition = condition.call(parent, parent);\n    }\n\n    if (condition) {\n      return this.type.decode(stream, parent);\n    }\n  }\n\n  size(val, parent) {\n    let {\n      condition\n    } = this;\n\n    if (typeof condition === 'function') {\n      condition = condition.call(parent, parent);\n    }\n\n    if (condition) {\n      return this.type.size(val, parent);\n    } else {\n      return 0;\n    }\n  }\n\n  encode(stream, val, parent) {\n    let {\n      condition\n    } = this;\n\n    if (typeof condition === 'function') {\n      condition = condition.call(parent, parent);\n    }\n\n    if (condition) {\n      return this.type.encode(stream, val, parent);\n    }\n  }\n\n}","map":{"version":3,"names":["Base","Optional","constructor","type","condition","decode","stream","parent","call","size","val","encode"],"sources":["E:/Mern login/client/node_modules/restructure/src/Optional.js"],"sourcesContent":["import {Base} from './Base.js';\n\nexport class Optional extends Base {\n  constructor(type, condition = true) {\n    super();\n    this.type = type;\n    this.condition = condition;\n  }\n\n  decode(stream, parent) {\n    let { condition } = this;\n    if (typeof condition === 'function') {\n      condition = condition.call(parent, parent);\n    }\n\n    if (condition) {\n      return this.type.decode(stream, parent);\n    }\n  }\n\n  size(val, parent) {\n    let { condition } = this;\n    if (typeof condition === 'function') {\n      condition = condition.call(parent, parent);\n    }\n\n    if (condition) {\n      return this.type.size(val, parent);\n    } else {\n      return 0;\n    }\n  }\n\n  encode(stream, val, parent) {\n    let { condition } = this;\n    if (typeof condition === 'function') {\n      condition = condition.call(parent, parent);\n    }\n\n    if (condition) {\n      return this.type.encode(stream, val, parent);\n    }\n  }\n}\n"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,WAAnB;AAEA,OAAO,MAAMC,QAAN,SAAuBD,IAAvB,CAA4B;EACjCE,WAAW,CAACC,IAAD,EAAyB;IAAA,IAAlBC,SAAkB,uEAAN,IAAM;IAClC;IACA,KAAKD,IAAL,GAAYA,IAAZ;IACA,KAAKC,SAAL,GAAiBA,SAAjB;EACD;;EAEDC,MAAM,CAACC,MAAD,EAASC,MAAT,EAAiB;IACrB,IAAI;MAAEH;IAAF,IAAgB,IAApB;;IACA,IAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;MACnCA,SAAS,GAAGA,SAAS,CAACI,IAAV,CAAeD,MAAf,EAAuBA,MAAvB,CAAZ;IACD;;IAED,IAAIH,SAAJ,EAAe;MACb,OAAO,KAAKD,IAAL,CAAUE,MAAV,CAAiBC,MAAjB,EAAyBC,MAAzB,CAAP;IACD;EACF;;EAEDE,IAAI,CAACC,GAAD,EAAMH,MAAN,EAAc;IAChB,IAAI;MAAEH;IAAF,IAAgB,IAApB;;IACA,IAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;MACnCA,SAAS,GAAGA,SAAS,CAACI,IAAV,CAAeD,MAAf,EAAuBA,MAAvB,CAAZ;IACD;;IAED,IAAIH,SAAJ,EAAe;MACb,OAAO,KAAKD,IAAL,CAAUM,IAAV,CAAeC,GAAf,EAAoBH,MAApB,CAAP;IACD,CAFD,MAEO;MACL,OAAO,CAAP;IACD;EACF;;EAEDI,MAAM,CAACL,MAAD,EAASI,GAAT,EAAcH,MAAd,EAAsB;IAC1B,IAAI;MAAEH;IAAF,IAAgB,IAApB;;IACA,IAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;MACnCA,SAAS,GAAGA,SAAS,CAACI,IAAV,CAAeD,MAAf,EAAuBA,MAAvB,CAAZ;IACD;;IAED,IAAIH,SAAJ,EAAe;MACb,OAAO,KAAKD,IAAL,CAAUQ,MAAV,CAAiBL,MAAjB,EAAyBI,GAAzB,EAA8BH,MAA9B,CAAP;IACD;EACF;;AAxCgC"},"metadata":{},"sourceType":"module"}