{"ast":null,"code":"import _slicedToArray from \"E:/Mern login/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"E:/Mern login/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Mern login/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _createForOfIteratorHelper from \"E:/Mern login/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = function __defNormalProp(obj, key, value) {\n  return key in obj ? __defProp(obj, key, {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: value\n  }) : obj[key] = value;\n};\n\nvar __spreadValues = function __spreadValues(a, b) {\n  for (var prop in b || (b = {})) {\n    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n\n  if (__getOwnPropSymbols) {\n    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var prop = _step.value;\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return a;\n};\n\nvar __objRest = function __objRest(source, exclude) {\n  var target = {};\n\n  for (var prop in source) {\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  }\n\n  if (source != null && __getOwnPropSymbols) {\n    var _iterator2 = _createForOfIteratorHelper(__getOwnPropSymbols(source)),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var prop = _step2.value;\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return target;\n}; // src/index.tsx\n\n\nimport React, { useRef, useEffect, useState } from \"react\"; // src/third-party/qrcodegen/index.ts\n\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\n\nvar qrcodegen;\n\n(function (qrcodegen2) {\n  var _QrCode = /*#__PURE__*/function () {\n    function _QrCode(version, errorCorrectionLevel, dataCodewords, msk) {\n      _classCallCheck(this, _QrCode);\n\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION) throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7) throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      var row = [];\n\n      for (var i = 0; i < this.size; i++) {\n        row.push(false);\n      }\n\n      for (var _i = 0; _i < this.size; _i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n\n      this.drawFunctionPatterns();\n      var allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n\n      if (msk == -1) {\n        var minPenalty = 1e9;\n\n        for (var _i2 = 0; _i2 < 8; _i2++) {\n          this.applyMask(_i2);\n          this.drawFormatBits(_i2);\n          var penalty = this.getPenaltyScore();\n\n          if (penalty < minPenalty) {\n            msk = _i2;\n            minPenalty = penalty;\n          }\n\n          this.applyMask(_i2);\n        }\n      }\n\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n\n    _createClass(_QrCode, [{\n      key: \"getModule\",\n      value: function getModule(x, y) {\n        return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n      }\n    }, {\n      key: \"getModules\",\n      value: function getModules() {\n        return this.modules;\n      }\n    }, {\n      key: \"drawFunctionPatterns\",\n      value: function drawFunctionPatterns() {\n        for (var i = 0; i < this.size; i++) {\n          this.setFunctionModule(6, i, i % 2 == 0);\n          this.setFunctionModule(i, 6, i % 2 == 0);\n        }\n\n        this.drawFinderPattern(3, 3);\n        this.drawFinderPattern(this.size - 4, 3);\n        this.drawFinderPattern(3, this.size - 4);\n        var alignPatPos = this.getAlignmentPatternPositions();\n        var numAlign = alignPatPos.length;\n\n        for (var _i3 = 0; _i3 < numAlign; _i3++) {\n          for (var j = 0; j < numAlign; j++) {\n            if (!(_i3 == 0 && j == 0 || _i3 == 0 && j == numAlign - 1 || _i3 == numAlign - 1 && j == 0)) this.drawAlignmentPattern(alignPatPos[_i3], alignPatPos[j]);\n          }\n        }\n\n        this.drawFormatBits(0);\n        this.drawVersion();\n      }\n    }, {\n      key: \"drawFormatBits\",\n      value: function drawFormatBits(mask) {\n        var data = this.errorCorrectionLevel.formatBits << 3 | mask;\n        var rem = data;\n\n        for (var i = 0; i < 10; i++) {\n          rem = rem << 1 ^ (rem >>> 9) * 1335;\n        }\n\n        var bits = (data << 10 | rem) ^ 21522;\n        assert(bits >>> 15 == 0);\n\n        for (var _i4 = 0; _i4 <= 5; _i4++) {\n          this.setFunctionModule(8, _i4, getBit(bits, _i4));\n        }\n\n        this.setFunctionModule(8, 7, getBit(bits, 6));\n        this.setFunctionModule(8, 8, getBit(bits, 7));\n        this.setFunctionModule(7, 8, getBit(bits, 8));\n\n        for (var _i5 = 9; _i5 < 15; _i5++) {\n          this.setFunctionModule(14 - _i5, 8, getBit(bits, _i5));\n        }\n\n        for (var _i6 = 0; _i6 < 8; _i6++) {\n          this.setFunctionModule(this.size - 1 - _i6, 8, getBit(bits, _i6));\n        }\n\n        for (var _i7 = 8; _i7 < 15; _i7++) {\n          this.setFunctionModule(8, this.size - 15 + _i7, getBit(bits, _i7));\n        }\n\n        this.setFunctionModule(8, this.size - 8, true);\n      }\n    }, {\n      key: \"drawVersion\",\n      value: function drawVersion() {\n        if (this.version < 7) return;\n        var rem = this.version;\n\n        for (var i = 0; i < 12; i++) {\n          rem = rem << 1 ^ (rem >>> 11) * 7973;\n        }\n\n        var bits = this.version << 12 | rem;\n        assert(bits >>> 18 == 0);\n\n        for (var _i8 = 0; _i8 < 18; _i8++) {\n          var color = getBit(bits, _i8);\n          var a = this.size - 11 + _i8 % 3;\n          var b = Math.floor(_i8 / 3);\n          this.setFunctionModule(a, b, color);\n          this.setFunctionModule(b, a, color);\n        }\n      }\n    }, {\n      key: \"drawFinderPattern\",\n      value: function drawFinderPattern(x, y) {\n        for (var dy = -4; dy <= 4; dy++) {\n          for (var dx = -4; dx <= 4; dx++) {\n            var dist = Math.max(Math.abs(dx), Math.abs(dy));\n            var xx = x + dx;\n            var yy = y + dy;\n            if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size) this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n          }\n        }\n      }\n    }, {\n      key: \"drawAlignmentPattern\",\n      value: function drawAlignmentPattern(x, y) {\n        for (var dy = -2; dy <= 2; dy++) {\n          for (var dx = -2; dx <= 2; dx++) {\n            this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n          }\n        }\n      }\n    }, {\n      key: \"setFunctionModule\",\n      value: function setFunctionModule(x, y, isDark) {\n        this.modules[y][x] = isDark;\n        this.isFunction[y][x] = true;\n      }\n    }, {\n      key: \"addEccAndInterleave\",\n      value: function addEccAndInterleave(data) {\n        var ver = this.version;\n        var ecl = this.errorCorrectionLevel;\n        if (data.length != _QrCode.getNumDataCodewords(ver, ecl)) throw new RangeError(\"Invalid argument\");\n        var numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n        var blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n        var rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n        var numShortBlocks = numBlocks - rawCodewords % numBlocks;\n        var shortBlockLen = Math.floor(rawCodewords / numBlocks);\n        var blocks = [];\n\n        var rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n\n        for (var i = 0, k = 0; i < numBlocks; i++) {\n          var dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n          k += dat.length;\n\n          var ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n\n          if (i < numShortBlocks) dat.push(0);\n          blocks.push(dat.concat(ecc));\n        }\n\n        var result = [];\n\n        var _loop = function _loop(_i9) {\n          blocks.forEach(function (block, j) {\n            if (_i9 != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[_i9]);\n          });\n        };\n\n        for (var _i9 = 0; _i9 < blocks[0].length; _i9++) {\n          _loop(_i9);\n        }\n\n        assert(result.length == rawCodewords);\n        return result;\n      }\n    }, {\n      key: \"drawCodewords\",\n      value: function drawCodewords(data) {\n        if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8)) throw new RangeError(\"Invalid argument\");\n        var i = 0;\n\n        for (var right = this.size - 1; right >= 1; right -= 2) {\n          if (right == 6) right = 5;\n\n          for (var vert = 0; vert < this.size; vert++) {\n            for (var j = 0; j < 2; j++) {\n              var x = right - j;\n              var upward = (right + 1 & 2) == 0;\n              var y = upward ? this.size - 1 - vert : vert;\n\n              if (!this.isFunction[y][x] && i < data.length * 8) {\n                this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n                i++;\n              }\n            }\n          }\n        }\n\n        assert(i == data.length * 8);\n      }\n    }, {\n      key: \"applyMask\",\n      value: function applyMask(mask) {\n        if (mask < 0 || mask > 7) throw new RangeError(\"Mask value out of range\");\n\n        for (var y = 0; y < this.size; y++) {\n          for (var x = 0; x < this.size; x++) {\n            var invert = void 0;\n\n            switch (mask) {\n              case 0:\n                invert = (x + y) % 2 == 0;\n                break;\n\n              case 1:\n                invert = y % 2 == 0;\n                break;\n\n              case 2:\n                invert = x % 3 == 0;\n                break;\n\n              case 3:\n                invert = (x + y) % 3 == 0;\n                break;\n\n              case 4:\n                invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n                break;\n\n              case 5:\n                invert = x * y % 2 + x * y % 3 == 0;\n                break;\n\n              case 6:\n                invert = (x * y % 2 + x * y % 3) % 2 == 0;\n                break;\n\n              case 7:\n                invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n                break;\n\n              default:\n                throw new Error(\"Unreachable\");\n            }\n\n            if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n          }\n        }\n      }\n    }, {\n      key: \"getPenaltyScore\",\n      value: function getPenaltyScore() {\n        var result = 0;\n\n        for (var y = 0; y < this.size; y++) {\n          var runColor = false;\n          var runX = 0;\n          var runHistory = [0, 0, 0, 0, 0, 0, 0];\n\n          for (var x = 0; x < this.size; x++) {\n            if (this.modules[y][x] == runColor) {\n              runX++;\n              if (runX == 5) result += _QrCode.PENALTY_N1;else if (runX > 5) result++;\n            } else {\n              this.finderPenaltyAddHistory(runX, runHistory);\n              if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n              runColor = this.modules[y][x];\n              runX = 1;\n            }\n          }\n\n          result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n        }\n\n        for (var _x = 0; _x < this.size; _x++) {\n          var _runColor = false;\n          var runY = 0;\n          var _runHistory = [0, 0, 0, 0, 0, 0, 0];\n\n          for (var _y = 0; _y < this.size; _y++) {\n            if (this.modules[_y][_x] == _runColor) {\n              runY++;\n              if (runY == 5) result += _QrCode.PENALTY_N1;else if (runY > 5) result++;\n            } else {\n              this.finderPenaltyAddHistory(runY, _runHistory);\n              if (!_runColor) result += this.finderPenaltyCountPatterns(_runHistory) * _QrCode.PENALTY_N3;\n              _runColor = this.modules[_y][_x];\n              runY = 1;\n            }\n          }\n\n          result += this.finderPenaltyTerminateAndCount(_runColor, runY, _runHistory) * _QrCode.PENALTY_N3;\n        }\n\n        for (var _y2 = 0; _y2 < this.size - 1; _y2++) {\n          for (var _x2 = 0; _x2 < this.size - 1; _x2++) {\n            var color = this.modules[_y2][_x2];\n            if (color == this.modules[_y2][_x2 + 1] && color == this.modules[_y2 + 1][_x2] && color == this.modules[_y2 + 1][_x2 + 1]) result += _QrCode.PENALTY_N2;\n          }\n        }\n\n        var dark = 0;\n\n        var _iterator3 = _createForOfIteratorHelper(this.modules),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var row = _step3.value;\n            dark = row.reduce(function (sum, color) {\n              return sum + (color ? 1 : 0);\n            }, dark);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        var total = this.size * this.size;\n        var k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n        assert(0 <= k && k <= 9);\n        result += k * _QrCode.PENALTY_N4;\n        assert(0 <= result && result <= 2568888);\n        return result;\n      }\n    }, {\n      key: \"getAlignmentPatternPositions\",\n      value: function getAlignmentPatternPositions() {\n        if (this.version == 1) return [];else {\n          var numAlign = Math.floor(this.version / 7) + 2;\n          var step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n          var result = [6];\n\n          for (var pos = this.size - 7; result.length < numAlign; pos -= step) {\n            result.splice(1, 0, pos);\n          }\n\n          return result;\n        }\n      }\n    }, {\n      key: \"finderPenaltyCountPatterns\",\n      value: function finderPenaltyCountPatterns(runHistory) {\n        var n = runHistory[1];\n        assert(n <= this.size * 3);\n        var core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n        return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n      }\n    }, {\n      key: \"finderPenaltyTerminateAndCount\",\n      value: function finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n        if (currentRunColor) {\n          this.finderPenaltyAddHistory(currentRunLength, runHistory);\n          currentRunLength = 0;\n        }\n\n        currentRunLength += this.size;\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        return this.finderPenaltyCountPatterns(runHistory);\n      }\n    }, {\n      key: \"finderPenaltyAddHistory\",\n      value: function finderPenaltyAddHistory(currentRunLength, runHistory) {\n        if (runHistory[0] == 0) currentRunLength += this.size;\n        runHistory.pop();\n        runHistory.unshift(currentRunLength);\n      }\n    }], [{\n      key: \"encodeText\",\n      value: function encodeText(text, ecl) {\n        var segs = qrcodegen2.QrSegment.makeSegments(text);\n        return _QrCode.encodeSegments(segs, ecl);\n      }\n    }, {\n      key: \"encodeBinary\",\n      value: function encodeBinary(data, ecl) {\n        var seg = qrcodegen2.QrSegment.makeBytes(data);\n        return _QrCode.encodeSegments([seg], ecl);\n      }\n    }, {\n      key: \"encodeSegments\",\n      value: function encodeSegments(segs, ecl) {\n        var minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        var maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n        var mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n        var boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n        if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError(\"Invalid value\");\n        var version;\n        var dataUsedBits;\n\n        for (version = minVersion;; version++) {\n          var dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n          var usedBits = QrSegment.getTotalBits(segs, version);\n\n          if (usedBits <= dataCapacityBits2) {\n            dataUsedBits = usedBits;\n            break;\n          }\n\n          if (version >= maxVersion) throw new RangeError(\"Data too long\");\n        }\n\n        for (var _i10 = 0, _arr = [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]; _i10 < _arr.length; _i10++) {\n          var newEcl = _arr[_i10];\n          if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n        }\n\n        var bb = [];\n\n        var _iterator4 = _createForOfIteratorHelper(segs),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var seg = _step4.value;\n            appendBits(seg.mode.modeBits, 4, bb);\n            appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n\n            var _iterator5 = _createForOfIteratorHelper(seg.getData()),\n                _step5;\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var b = _step5.value;\n                bb.push(b);\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        assert(bb.length == dataUsedBits);\n        var dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        assert(bb.length <= dataCapacityBits);\n        appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n        appendBits(0, (8 - bb.length % 8) % 8, bb);\n        assert(bb.length % 8 == 0);\n\n        for (var padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17) {\n          appendBits(padByte, 8, bb);\n        }\n\n        var dataCodewords = [];\n\n        while (dataCodewords.length * 8 < bb.length) {\n          dataCodewords.push(0);\n        }\n\n        bb.forEach(function (b, i) {\n          return dataCodewords[i >>> 3] |= b << 7 - (i & 7);\n        });\n        return new _QrCode(version, ecl, dataCodewords, mask);\n      }\n    }, {\n      key: \"getNumRawDataModules\",\n      value: function getNumRawDataModules(ver) {\n        if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION) throw new RangeError(\"Version number out of range\");\n        var result = (16 * ver + 128) * ver + 64;\n\n        if (ver >= 2) {\n          var numAlign = Math.floor(ver / 7) + 2;\n          result -= (25 * numAlign - 10) * numAlign - 55;\n          if (ver >= 7) result -= 36;\n        }\n\n        assert(208 <= result && result <= 29648);\n        return result;\n      }\n    }, {\n      key: \"getNumDataCodewords\",\n      value: function getNumDataCodewords(ver, ecl) {\n        return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      }\n    }, {\n      key: \"reedSolomonComputeDivisor\",\n      value: function reedSolomonComputeDivisor(degree) {\n        if (degree < 1 || degree > 255) throw new RangeError(\"Degree out of range\");\n        var result = [];\n\n        for (var i = 0; i < degree - 1; i++) {\n          result.push(0);\n        }\n\n        result.push(1);\n        var root = 1;\n\n        for (var _i11 = 0; _i11 < degree; _i11++) {\n          for (var j = 0; j < result.length; j++) {\n            result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n            if (j + 1 < result.length) result[j] ^= result[j + 1];\n          }\n\n          root = _QrCode.reedSolomonMultiply(root, 2);\n        }\n\n        return result;\n      }\n    }, {\n      key: \"reedSolomonComputeRemainder\",\n      value: function reedSolomonComputeRemainder(data, divisor) {\n        var result = divisor.map(function (_) {\n          return 0;\n        });\n\n        var _iterator6 = _createForOfIteratorHelper(data),\n            _step6;\n\n        try {\n          var _loop2 = function _loop2() {\n            var b = _step6.value;\n            var factor = b ^ result.shift();\n            result.push(0);\n            divisor.forEach(function (coef, i) {\n              return result[i] ^= _QrCode.reedSolomonMultiply(coef, factor);\n            });\n          };\n\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            _loop2();\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        return result;\n      }\n    }, {\n      key: \"reedSolomonMultiply\",\n      value: function reedSolomonMultiply(x, y) {\n        if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError(\"Byte out of range\");\n        var z = 0;\n\n        for (var i = 7; i >= 0; i--) {\n          z = z << 1 ^ (z >>> 7) * 285;\n          z ^= (y >>> i & 1) * x;\n        }\n\n        assert(z >>> 8 == 0);\n        return z;\n      }\n    }]);\n\n    return _QrCode;\n  }();\n\n  var QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [[-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [[-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25], [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49], [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68], [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]];\n  qrcodegen2.QrCode = QrCode;\n\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError(\"Value out of range\");\n\n    for (var i = len - 1; i >= 0; i--) {\n      bb.push(val >>> i & 1);\n    }\n  }\n\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n\n  function assert(cond) {\n    if (!cond) throw new Error(\"Assertion error\");\n  }\n\n  var _QrSegment = /*#__PURE__*/function () {\n    function _QrSegment(mode, numChars, bitData) {\n      _classCallCheck(this, _QrSegment);\n\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0) throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n\n    _createClass(_QrSegment, [{\n      key: \"getData\",\n      value: function getData() {\n        return this.bitData.slice();\n      }\n    }], [{\n      key: \"makeBytes\",\n      value: function makeBytes(data) {\n        var bb = [];\n\n        var _iterator7 = _createForOfIteratorHelper(data),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var b = _step7.value;\n            appendBits(b, 8, bb);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n\n        return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n      }\n    }, {\n      key: \"makeNumeric\",\n      value: function makeNumeric(digits) {\n        if (!_QrSegment.isNumeric(digits)) throw new RangeError(\"String contains non-numeric characters\");\n        var bb = [];\n\n        for (var i = 0; i < digits.length;) {\n          var n = Math.min(digits.length - i, 3);\n          appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n          i += n;\n        }\n\n        return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n      }\n    }, {\n      key: \"makeAlphanumeric\",\n      value: function makeAlphanumeric(text) {\n        if (!_QrSegment.isAlphanumeric(text)) throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n        var bb = [];\n        var i;\n\n        for (i = 0; i + 2 <= text.length; i += 2) {\n          var temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n          temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n          appendBits(temp, 11, bb);\n        }\n\n        if (i < text.length) appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n        return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n      }\n    }, {\n      key: \"makeSegments\",\n      value: function makeSegments(text) {\n        if (text == \"\") return [];else if (_QrSegment.isNumeric(text)) return [_QrSegment.makeNumeric(text)];else if (_QrSegment.isAlphanumeric(text)) return [_QrSegment.makeAlphanumeric(text)];else return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n      }\n    }, {\n      key: \"makeEci\",\n      value: function makeEci(assignVal) {\n        var bb = [];\n        if (assignVal < 0) throw new RangeError(\"ECI assignment value out of range\");else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb);else if (assignVal < 1 << 14) {\n          appendBits(2, 2, bb);\n          appendBits(assignVal, 14, bb);\n        } else if (assignVal < 1e6) {\n          appendBits(6, 3, bb);\n          appendBits(assignVal, 21, bb);\n        } else throw new RangeError(\"ECI assignment value out of range\");\n        return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n      }\n    }, {\n      key: \"isNumeric\",\n      value: function isNumeric(text) {\n        return _QrSegment.NUMERIC_REGEX.test(text);\n      }\n    }, {\n      key: \"isAlphanumeric\",\n      value: function isAlphanumeric(text) {\n        return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n      }\n    }, {\n      key: \"getTotalBits\",\n      value: function getTotalBits(segs, version) {\n        var result = 0;\n\n        var _iterator8 = _createForOfIteratorHelper(segs),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var seg = _step8.value;\n            var ccbits = seg.mode.numCharCountBits(version);\n            if (seg.numChars >= 1 << ccbits) return Infinity;\n            result += 4 + ccbits + seg.bitData.length;\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n\n        return result;\n      }\n    }, {\n      key: \"toUtf8ByteArray\",\n      value: function toUtf8ByteArray(str) {\n        str = encodeURI(str);\n        var result = [];\n\n        for (var i = 0; i < str.length; i++) {\n          if (str.charAt(i) != \"%\") result.push(str.charCodeAt(i));else {\n            result.push(parseInt(str.substr(i + 1, 2), 16));\n            i += 2;\n          }\n        }\n\n        return result;\n      }\n    }]);\n\n    return _QrSegment;\n  }();\n\n  var QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n\n(function (qrcodegen2) {\n  var QrCode;\n\n  (function (QrCode2) {\n    var _Ecc = /*#__PURE__*/_createClass(function _Ecc(ordinal, formatBits) {\n      _classCallCheck(this, _Ecc);\n\n      this.ordinal = ordinal;\n      this.formatBits = formatBits;\n    });\n\n    var Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n\n(function (qrcodegen2) {\n  var QrSegment;\n\n  (function (QrSegment2) {\n    var _Mode = /*#__PURE__*/function () {\n      function _Mode(modeBits, numBitsCharCount) {\n        _classCallCheck(this, _Mode);\n\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n\n      _createClass(_Mode, [{\n        key: \"numCharCountBits\",\n        value: function numCharCountBits(ver) {\n          return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n        }\n      }]);\n\n      return _Mode;\n    }();\n\n    var Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\n\nvar qrcodegen_default = qrcodegen; // src/index.tsx\n\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\n\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\n\nfunction generatePath(modules) {\n  var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var ops = [];\n  modules.forEach(function (row, y) {\n    var start = null;\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        ops.push(\"M\".concat(start + margin, \" \").concat(y + margin, \"h\").concat(x - start, \"v1H\").concat(start + margin, \"z\"));\n        start = null;\n        return;\n      }\n\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n\n        if (start === null) {\n          ops.push(\"M\".concat(x + margin, \",\").concat(y + margin, \" h1v1H\").concat(x + margin, \"z\"));\n        } else {\n          ops.push(\"M\".concat(start + margin, \",\").concat(y + margin, \" h\").concat(x + 1 - start, \"v1H\").concat(start + margin, \"z\"));\n        }\n\n        return;\n      }\n\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\n\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map(function (row, y) {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n\n    return row.map(function (cell, x) {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n\n      return false;\n    });\n  });\n}\n\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n\n  var margin = includeMargin ? MARGIN_SIZE : 0;\n  var numCells = cells.length + margin * 2;\n  var defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  var scale = numCells / size;\n  var w = (imageSettings.width || defaultSize) * scale;\n  var h = (imageSettings.height || defaultSize) * scale;\n  var x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  var y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  var excavation = null;\n\n  if (imageSettings.excavate) {\n    var floorX = Math.floor(x);\n    var floorY = Math.floor(y);\n    var ceilW = Math.ceil(w + x - floorX);\n    var ceilH = Math.ceil(h + y - floorY);\n    excavation = {\n      x: floorX,\n      y: floorY,\n      w: ceilW,\n      h: ceilH\n    };\n  }\n\n  return {\n    x: x,\n    y: y,\n    h: h,\n    w: w,\n    excavation: excavation\n  };\n}\n\nvar SUPPORTS_PATH2D = function () {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}();\n\nfunction QRCodeCanvas(props) {\n  var _a = props,\n      value = _a.value,\n      _a$size = _a.size,\n      size = _a$size === void 0 ? DEFAULT_SIZE : _a$size,\n      _a$level = _a.level,\n      level = _a$level === void 0 ? DEFAULT_LEVEL : _a$level,\n      _a$bgColor = _a.bgColor,\n      bgColor = _a$bgColor === void 0 ? DEFAULT_BGCOLOR : _a$bgColor,\n      _a$fgColor = _a.fgColor,\n      fgColor = _a$fgColor === void 0 ? DEFAULT_FGCOLOR : _a$fgColor,\n      _a$includeMargin = _a.includeMargin,\n      includeMargin = _a$includeMargin === void 0 ? DEFAULT_INCLUDEMARGIN : _a$includeMargin,\n      style = _a.style,\n      imageSettings = _a.imageSettings,\n      otherProps = __objRest(_a, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\", \"style\", \"imageSettings\"]);\n\n  var imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n\n  var _canvas = useRef(null);\n\n  var _image = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isImgLoaded = _useState2[0],\n      setIsImageLoaded = _useState2[1];\n\n  useEffect(function () {\n    if (_canvas.current != null) {\n      var canvas = _canvas.current;\n      var ctx = canvas.getContext(\"2d\");\n\n      if (!ctx) {\n        return;\n      }\n\n      var cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      var margin = includeMargin ? MARGIN_SIZE : 0;\n      var numCells = cells.length + margin * 2;\n      var calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      var image = _image.current;\n      var haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n\n      var pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      var scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function (row, rdx) {\n          row.forEach(function (cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(function () {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n\n  var canvasStyle = __spreadValues({\n    height: size,\n    width: size\n  }, style);\n\n  var img = null;\n\n  if (imgSrc != null) {\n    img = /* @__PURE__ */React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: {\n        display: \"none\"\n      },\n      onLoad: function onLoad() {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n\n  return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\n\nfunction QRCodeSVG(props) {\n  var _a = props,\n      value = _a.value,\n      _a$size2 = _a.size,\n      size = _a$size2 === void 0 ? DEFAULT_SIZE : _a$size2,\n      _a$level2 = _a.level,\n      level = _a$level2 === void 0 ? DEFAULT_LEVEL : _a$level2,\n      _a$bgColor2 = _a.bgColor,\n      bgColor = _a$bgColor2 === void 0 ? DEFAULT_BGCOLOR : _a$bgColor2,\n      _a$fgColor2 = _a.fgColor,\n      fgColor = _a$fgColor2 === void 0 ? DEFAULT_FGCOLOR : _a$fgColor2,\n      _a$includeMargin2 = _a.includeMargin,\n      includeMargin = _a$includeMargin2 === void 0 ? DEFAULT_INCLUDEMARGIN : _a$includeMargin2,\n      imageSettings = _a.imageSettings,\n      otherProps = __objRest(_a, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\", \"imageSettings\"]);\n\n  var cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  var margin = includeMargin ? MARGIN_SIZE : 0;\n  var numCells = cells.length + margin * 2;\n  var calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  var image = null;\n\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n\n    image = /* @__PURE__ */React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n\n  var fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: \"0 0 \".concat(numCells, \" \").concat(numCells)\n  }, otherProps), /* @__PURE__ */React.createElement(\"path\", {\n    fill: bgColor,\n    d: \"M0,0 h\".concat(numCells, \"v\").concat(numCells, \"H0z\"),\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\n\nvar QRCode = function QRCode(props) {\n  var _a = props,\n      renderAs = _a.renderAs,\n      otherProps = __objRest(_a, [\"renderAs\"]);\n\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n\n  return /* @__PURE__ */React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\n\nexport { QRCodeCanvas, QRCodeSVG, QRCode as default };","map":{"version":3,"names":["__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__objRest","source","exclude","target","indexOf","React","useRef","useEffect","useState","qrcodegen","qrcodegen2","_QrCode","version","errorCorrectionLevel","dataCodewords","msk","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","x","y","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","length","j","drawAlignmentPattern","drawVersion","data","formatBits","rem","bits","getBit","color","Math","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","ecl","getNumDataCodewords","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","forEach","block","right","vert","upward","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","n","core","currentRunColor","currentRunLength","pop","unshift","text","segs","QrSegment","makeSegments","encodeSegments","seg","makeBytes","minVersion","maxVersion","boostEcl","dataUsedBits","dataCapacityBits2","usedBits","getTotalBits","Ecc","MEDIUM","QUARTILE","HIGH","newEcl","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","dataCapacityBits","min","padByte","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","QrCode","val","len","cond","_QrSegment","bitData","Mode","BYTE","digits","isNumeric","parseInt","substr","NUMERIC","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","makeNumeric","makeAlphanumeric","toUtf8ByteArray","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","MARGIN_SIZE","DEFAULT_IMG_SCALE","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","getImageSettings","cells","includeMargin","imageSettings","numCells","defaultSize","scale","width","height","excavate","floorX","floorY","ceilW","ceilH","SUPPORTS_PATH2D","Path2D","addPath","e","QRCodeCanvas","props","_a","level","bgColor","fgColor","style","otherProps","imgSrc","src","_canvas","_image","isImgLoaded","setIsImageLoaded","current","canvas","ctx","getContext","encodeText","getModules","calculatedImageSettings","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","drawImage","canvasStyle","img","createElement","display","onLoad","ref","Fragment","QRCodeSVG","xlinkHref","preserveAspectRatio","fgPath","viewBox","d","shapeRendering","QRCode","renderAs","default"],"sources":["E:/Mern login/client/node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React, { useRef, useEffect, useState } from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class {\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    getModules() {\n      return this.modules;\n    }\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  let QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  ];\n  qrcodegen2.QrCode = QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class {\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    getData() {\n      return this.bitData.slice();\n    }\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  let QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class {\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    let Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class {\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    let Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  return { x, y, h, w, excavation };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nfunction QRCodeCanvas(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    style,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"style\",\n    \"imageSettings\"\n  ]);\n  const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  const _canvas = useRef(null);\n  const _image = useRef(null);\n  const [isImgLoaded, setIsImageLoaded] = useState(false);\n  useEffect(() => {\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      const margin = includeMargin ? MARGIN_SIZE : 0;\n      const numCells = cells.length + margin * 2;\n      const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      const scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function(row, rdx) {\n          row.forEach(function(cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n  const canvasStyle = __spreadValues({ height: size, width: size }, style);\n  let img = null;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */ React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: { display: \"none\" },\n      onLoad: () => {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\nfunction QRCodeSVG(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"imageSettings\"\n  ]);\n  let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */ React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n  const fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */ React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: `0 0 ${numCells} ${numCells}`\n  }, otherProps), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: bgColor,\n    d: `M0,0 h${numCells}v${numCells}H0z`,\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\nvar QRCode = (props) => {\n  const _a = props, { renderAs } = _a, otherProps = __objRest(_a, [\"renderAs\"]);\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */ React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n  return /* @__PURE__ */ React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\nexport {\n  QRCodeCanvas,\n  QRCodeSVG,\n  QRCode as default\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}